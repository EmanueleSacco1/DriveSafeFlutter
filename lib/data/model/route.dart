import 'package:json_annotation/json_annotation.dart';
import 'package:cloud_firestore/cloud_firestore.dart' show GeoPoint; // Import Firestore GeoPoint

// This file will be generated by build_runner
part 'route.g.dart';

/// Represents a recorded driving route.
///
/// This data class is used to store route information in Firebase Firestore.
/// Equivalent to `Route.kt`.
@JsonSerializable() // Annotation for JSON code generation
class Route {
  /// The unique identifier for the route document in Firestore.
  /// `@DocumentId` (if using a Firestore helper that supports it) would populate this field
  /// automatically with the document ID. Here, it's manually handled or set post-creation.
  @JsonKey(name: 'id', includeIfNull: false) // Maps the JSON field 'id' to the id property
  String id; // Made non-final to allow assignment after fromJson, or if populated by Firestore

  /// The unique identifier of the user who recorded this route.
  /// Links the route to a specific user profile.
  final String userId;

  /// Timestamp of when the route was recorded (in milliseconds since epoch).
  /// Used for sorting and temporal information.
  final int timestamp;

  /// A list of geographic points (latitude and longitude) representing the path.
  /// Stored as a list of `GeoPoint` objects.
  @GeoPointListConverter() // Applies the converter to the list of GeoPoint
  final List<GeoPoint> pathPoints;

  /// Timestamp of when the route recording started (in milliseconds since epoch).
  final int startTime;

  /// Timestamp of when the route recording ended (in milliseconds since epoch).
  final int endTime;

  /// The total distance covered during the route (in meters).
  /// Stored as a floating-point number.
  final double totalDistance;

  /// The average speed calculated for the route (in m/s).
  /// Stored as a floating-point number.
  final double averageSpeed;

  /// The maximum speed reached during the route (in m/s).
  /// Stored as a floating-point number.
  final double maxSpeed;

  /// Creates a [Route] instance.
  Route({
    this.id = '', // Defaults to empty, will be populated by Firestore document ID or later
    required this.userId,
    required this.timestamp,
    this.pathPoints = const [], // Defaults to an empty list
    required this.startTime,
    required this.endTime,
    required this.totalDistance,
    required this.averageSpeed,
    required this.maxSpeed,
  });

  /// Factory constructor to deserialize a [Route] object from a JSON map.
  ///
  /// This uses the generated `_$RouteFromJson` function.
  factory Route.fromJson(Map<String, dynamic> json) => _$RouteFromJson(json);

  /// Method to serialize a [Route] object into a JSON map.
  ///
  /// This uses the generated `_$RouteToJson` function.
  Map<String, dynamic> toJson() => _$RouteToJson(this);
}

/// Custom [JsonConverter] for a list of [GeoPoint] objects.
///
/// This converter handles the serialization and deserialization of `List<GeoPoint>`
/// to and from a list of dynamic objects suitable for JSON and Firestore.
class GeoPointListConverter implements JsonConverter<List<GeoPoint>, List<dynamic>> {
  /// Creates a constant instance of [GeoPointListConverter].
  const GeoPointListConverter();

  /// Converts a list of dynamic objects (typically from JSON) into a `List<GeoPoint>`.
  ///
  /// It handles elements that might already be [GeoPoint] instances (e.g., when read
  /// directly from Firestore) or `Map<String, dynamic>` representations of GeoPoints.
  @override
  List<GeoPoint> fromJson(List<dynamic> jsonList) {
    return jsonList.map((e) {
      if (e is GeoPoint) {
        // If it's already a GeoPoint (e.g., read directly from Firestore)
        return e;
      } else if (e is Map<String, dynamic>) {
        // If it's a Map (e.g., from a traditional JSON structure)
        return GeoPoint(e['latitude'] as double, e['longitude'] as double);
      }
      // If the element is neither a GeoPoint nor a compatible Map, throw an error.
      throw ArgumentError('Expected GeoPoint or Map for GeoPoint, but got ${e.runtimeType}');
    }).toList();
  }

  /// Converts a `List<GeoPoint>` into a list of dynamic objects.
  ///
  /// When saving to Firestore, `GeoPoint` objects can be stored directly.
  /// Firestore knows how to handle them, so no further conversion to `Map` is needed here.
  @override
  List<dynamic> toJson(List<GeoPoint> objectList) {
    return objectList;
  }
}
